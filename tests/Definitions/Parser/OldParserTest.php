<?php

    /**
     * Created by PhpStorm.
     * User: marco
     * Date: 07/07/16
     * Time: 16:23
     */
    class OldParserTest extends PHPUnit_Framework_TestCase
    {

        /**
         * @var \Microsistec\DbParser\Parser\OldParser
         */
        protected $oldParser;

        public function setUp()
        {
            parent::setUp(); // TODO: Change the autogenerated stub

            $this->oldParser = new \Microsistec\DbParser\Parser\OldParser();
        }

        /** @test */
        public function it_must_detect_the_correct_property_type()
        {
            $parse = $this->oldParser->parse($this->getApartamentStd());

            $this->assertEquals('apartament', $parse->type);
            $this->assertEquals(\Microsistec\DbParser\Definition\PropertyType\Apartament::PADRAO, $parse->subtype);
        }

        /** @test */
        public function it_must_detect_the_correct_transactions()
        {

            $property = $this->oldParser->parse($this->getApartamentStd());

            $this->assertCount(3, $property->disponibility);

            $disponibilidades = $property->disponibility;
            $this->assertInstanceOf(\Microsistec\DbParser\Definition\Disponibility\Sell::class,$disponibilidades[0]);
            $this->assertInstanceOf(\Microsistec\DbParser\Definition\Disponibility\Rent::class,$disponibilidades[1]);
            $this->assertInstanceOf(\Microsistec\DbParser\Definition\Disponibility\Season::class,$disponibilidades[2]);

        }

        /** @test */
        public function it_must_have_the_correct_address()
        {
            $property = $this->oldParser->parse($this->getApartamentStd());

            $this->assertEquals('Rua dos bobos',  $property->address);
            $this->assertEquals('0', $property->number);
            $this->assertEquals('Ap. 304', $property->complement);
            $this->assertEquals("Duffvile", $property->neighborhood);
            $this->assertEquals('Bobolandia', $property->city);
            $this->assertEquals('00000-000', $property->cep);
            $this->assertEquals('bb', $property->state);
            $this->assertEquals('2', $property->zone);

        }

        /** @test */
        public function it_must_have_an_area()
        {

            $property = $this->oldParser->parse($this->getApartamentStd());

            $this->assertEquals(10, $property->useful_area);
            $this->assertEquals(11, $property->total_area);
        }

        /** @test */
        public function it_must_have_a_composition()
        {
            $property = $this->oldParser->parse($this->getApartamentStd());

            $this->assertEquals(1, $property->bedroom);
            $this->assertEquals(2, $property->suites);
            $this->assertEquals(3, $property->bathroom);
            $this->assertEquals(4, $property->room);
            $this->assertEquals(5, $property->kitchen);
            $this->assertEquals(6, $property->garage_lot);
            $this->assertEquals(7, $property->housekeeper_room);
            $this->assertEquals(9, $property->lavatory);

        }

        public function getApartamentStd()
        {
            $std = new stdClass();

            $std->codigo = 201;
            $std->cod_filial = 0;

            $std->area_util = 10;
            $std->area_total = 11;

            $std->endereco = "Rua dos bobos";
            $std->numero = "0";
            $std->complemento = "Ap. 304";
            $std->bairro = "Duffvile";
            $std->cidade = "Bobolandia";
            $std->cep = '00000-000';
            $std->uf = 'bb';
            $std->zona = "2";

            $std->ref_alternativa = 'Abacate';
            $std->idade_imovel = 65;

            $std->tipo_imovel = 1;
            $std->definicao_01 = '1';
            $std->definicao_02 = '0';
            $std->definicao_03 = '0';
            $std->definicao_04 = '0';
            $std->definicao_05 = '0';
            $std->definicao_master = '0';

            $std->dorms = 1;
            $std->suites = 2;
            $std->banheiros = 3;
            $std->salas = 4;
            $std->cozinhas = 5;
            $std->vagas_garagem = 6;
            $std->dep_empregada = 7;
            $std->area_servico = 8;
            $std->lavabos = 9;

            $std->disponibilidade = '111';
            $std->pagto_opcoes = '11111111111111';
            $std->pagto_mensais_qtd = 10;
            $std->pagto_mensais_valor = 150000.50;
            $std->valor_venda = 65400000.00;
            $std->valor_locacao = 6544.00;
            $std->pagto_pacote_diaria = 44.00;
            $std->valor_locacao_baixa_temporada = 44.00;
            $std->valor_locacao_alta_temporada = 94.00;

            return $std;
        }

    }